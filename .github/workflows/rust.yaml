name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest
    permissions: write-all

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, arm64]

    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install x86_64-apple-darwin target
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: rustup target add x86_64-apple-darwin

      - name: Install MSVC tools
        if: matrix.os == 'windows-latest'
        run: |
          choco install visualstudio2019buildtools visualstudio2019-workload-vctools -y
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat"

      - name: Build release - Linux
        if: matrix.os == 'ubuntu-latest'
        run: cargo build --release --target x86_64-unknown-linux-musl
      - name: Build release - Windows
        if: matrix.os == 'windows-latest'
        run: cargo build --release --target x86_64-pc-windows-msvc
      - name: Build release - macOS
        if: matrix.os == 'macos-latest'
        run: cargo build --release --target x86_64-apple-darwin
      - name: Build release - ARM macOS
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: cargo build --release --target aarch64-apple-darwin

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset - Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/x86_64-unknown-linux-musl/release/learn-rust
          asset_name: learn-rust-linux-amd64
          asset_content_type: application/octet-stream
      - name: Upload Release Asset - Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/x86_64-pc-windows-msvc/release/learn-rust.exe
          asset_name: learn-rust-windows-amd64.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset - macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/x86_64-apple-darwin/release/learn-rust
          asset_name: learn-rust-macos-amd64
          asset_content_type: application/octet-stream
      - name: Upload Release Asset - ARM macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/aarch64-apple-darwin/release/learn-rust
          asset_name: learn-rust-macos-arm64
          asset_content_type: application/octet-stream
